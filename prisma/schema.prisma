// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
	provider = "prisma-client-js"
}

generator nestgraphql {
	provider = "node node_modules/prisma-nestjs-graphql"
	output = "../src/models/common/@generated"
	fields_Validator_from = "class-validator"
	fields_Validator_input = true
	noAtomicOperations = true
}

datasource db {
	provider = "postgresql"
	url = env("DATABASE_URL")
}

enum UserRole {
	USER
	ADMIN
	SUPER_ADMIN
}

model User {
	id						Int				@default(autoincrement()) @id
	/// @Validator.IsOptional()
	/// @Validator.IsEmail()
	email					String			@unique
	/// @Validator.IsOptional()
	/// @Validator.IsString()
	/// @Validator.MinLength(8)
	password				String
	role					UserRole		@default(USER)
	createdAt				DateTime		@default(now())
	updatedAt				DateTime		@updatedAt

	@@index([id, email])
}

model Kol {
	id						Int					@default(autoincrement()) @id
	twitterHandle			String				@unique
	telegramHandle			String				@unique
	twitterProfile 			TwitterProfile?

	createdAt				DateTime			@default(now())
	updatedAt				DateTime			@updatedAt
	
	@@index([id])
}

model TwitterProfile {
	id						Int				@default(autoincrement()) @id
	profileId				String
	name 					String
	username 				String
	location 				String
	description 			String
	imageUrl 				String
	profileCreatedAt 		String
	pinnedTweetId 			String
	isProtected 			Boolean
	isVerified 				Boolean
	followersCount 			Int
	followingCount 			Int
	tweetCount 				Int
	listedCount 			Int
	likeCount 				Int
	urls					Json
	kol						Kol 			@relation(fields: [kolId], references: [id])
	kolId					Int				@unique // relation scalar field (used in the `@relation` attribute above)

	createdAt				DateTime		@default(now())
	updatedAt				DateTime		@updatedAt

	@@index([id,kolId])
}
